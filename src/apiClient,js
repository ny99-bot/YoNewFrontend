// src/apiClient.js

// üåê Your deployed backend on Render
const API_BASE = import.meta?.env?.VITE_API_BASE || "https://yonewbackend.onrender.com";

/* --------------------------------------------------
   UID helper (stable per browser)
   Keeps existing localStorage key "uid" for backward compatibility.
-------------------------------------------------- */
export function getUid() {
  let uid = localStorage.getItem("uid");
  if (!uid) {
    uid = "uid_" + Math.random().toString(36).slice(2);
    localStorage.setItem("uid", uid);
  }
  return uid;
}

/* --------------------------------------------------
   List trips
   GET /trips/list?uid=...
   Returns an array of trips.
-------------------------------------------------- */
export async function listTrips(uid) {
  const res = await fetch(`${API_BASE}/trips/list?uid=${encodeURIComponent(uid)}`);
  const json = await res.json();
  return json?.data?.trips || [];
}

/* --------------------------------------------------
   Fetch a single trip (with items)
   GET /trips/get?uid=...&tripId=...
   We return the raw server JSON so the caller (TripSummary)
   can unwrap either { ok:true, data:{ trip } } or { trip }.
-------------------------------------------------- */
export async function fetchTripDetails(uid, tripId) {
  const res = await fetch(
    `${API_BASE}/trips/get?uid=${encodeURIComponent(uid)}&tripId=${encodeURIComponent(tripId)}`
  );
  // Return raw so TripSummary can handle both shapes
  return await res.json();
}

/* --------------------------------------------------
   Step 3: AI Suggestions (location-aware)
   POST /gemini/suggest
   Returns:
     { destination, purpose, airline, travelClass, suggestions: [{id,text,category,reason,selected}, ...] }
-------------------------------------------------- */
export async function getAiSuggestions({ destination, dates, airline, travelClass, purpose, items }) {
  const res = await fetch(`${API_BASE}/gemini/suggest`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ destination, dates, airline, travelClass, purpose, items }),
  });
  const json = await res.json();
  // Pass through the server's normalized shape
  return json?.data || { suggestions: [] };
}

/* --------------------------------------------------
   Step 4: Weight estimates
   POST /gemini/weight
   Returns:
     { items: [{ ...item, aiWeight }], totalG }
-------------------------------------------------- */
export async function getWeights({ items }) {
  const res = await fetch(`${API_BASE}/gemini/weight`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ items }),
  });
  const json = await res.json();
  return json?.data || { items: [], totalG: 0 };
}

/* --------------------------------------------------
   Step 4 (if overweight): Optimize list
   POST /gemini/optimize
   Returns:
     { keep: [...items], drop: [...items], totalG, limitG }
-------------------------------------------------- */
export async function optimizeItems({ items, limitKg }) {
  const res = await fetch(`${API_BASE}/gemini/optimize`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ items, limitKg }),
  });
  const json = await res.json();
  return json?.data || null;
}

/* --------------------------------------------------
   Step 5: Packing strategy
   POST /gemini/steps
   Send:
     { items, recommendationsSelected, suitcaseSizeL, luggageType }
   Returns:
     { suitcaseSizeL, luggageType, orderedPackingList: [...], steps: [...] }
-------------------------------------------------- */
export async function getPackingSteps({ items, recommendationsSelected, suitcaseSizeL, luggageType }) {
  const res = await fetch(`${API_BASE}/gemini/steps`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ items, recommendationsSelected, suitcaseSizeL, luggageType }),
  });
  const json = await res.json();
  return json?.data || { suitcaseSizeL, luggageType, orderedPackingList: [], steps: [] };
}

/* --------------------------------------------------
   Save trip metadata
   POST /trips/save
   Body:
     { uid, tripId, trip: {...} }
   Returns:
     { tripId }
-------------------------------------------------- */
export async function saveTrip(uid, maybeTripId, tripPayload) {
  const res = await fetch(`${API_BASE}/trips/save`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ uid, tripId: maybeTripId || null, trip: { ...tripPayload } }),
  });
  const json = await res.json();
  return json?.data || {};
}

/* --------------------------------------------------
   Save trip items (bulk)
   POST /trips/items/save
   Body:
     { uid, tripId, items: [...] }
   Returns:
     { count: N }
-------------------------------------------------- */
export async function saveTripItems(uid, tripId, itemsArray) {
  const res = await fetch(`${API_BASE}/trips/items/save`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ uid, tripId, items: itemsArray }),
  });
  const json = await res.json();
  return json?.data || {};
}
