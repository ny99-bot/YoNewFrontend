// src/apiClient.js

// üåê Your deployed backend on Render (override with Vite env if present)
const API_BASE = import.meta?.env?.VITE_API_BASE || "https://yonewbackend.onrender.com";

/* --------------------------------------------------
   UID helper (stable per browser)
   Keeps existing localStorage key "uid" for backward compatibility.
-------------------------------------------------- */
export function getUid() {
  let uid = localStorage.getItem("uid");
  if (!uid) {
    uid = "uid_" + Math.random().toString(36).slice(2);
    localStorage.setItem("uid", uid);
  }
  return uid;
}

/* --------------------------------------------------
   Small fetch helper with basic retries (network flakes)
-------------------------------------------------- */
async function postJSON(url, body, { retries = 1 } = {}) {
  let lastErr;
  for (let i = 0; i <= retries; i++) {
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      });
      return await res.json();
    } catch (e) {
      lastErr = e;
      if (i < retries) await new Promise(r => setTimeout(r, 600 * (i + 1)));
    }
  }
  throw lastErr;
}

/* --------------------------------------------------
   List trips
   GET /trips/list?uid=...
   Returns an array of trips.
-------------------------------------------------- */
export async function listTrips(uid) {
  const res = await fetch(`${API_BASE}/trips/list?uid=${encodeURIComponent(uid)}`);
  const json = await res.json();
  return json?.data?.trips || [];
}

/* --------------------------------------------------
   Fetch a single trip (with items)
   GET /trips/get?uid=...&tripId=...
   We return the raw server JSON so the caller (TripSummary)
   can unwrap either { ok:true, data:{ trip } } or { trip }.
-------------------------------------------------- */
export async function fetchTripDetails(uid, tripId) {
  const res = await fetch(
    `${API_BASE}/trips/get?uid=${encodeURIComponent(uid)}&tripId=${encodeURIComponent(tripId)}`
  );
  return await res.json(); // raw; TripSummary handles shape
}

/* --------------------------------------------------
   Step 3: AI Suggestions (location-aware)
   POST /gemini/suggest
   Returns:
     { destination, purpose, airline, travelClass, suggestions: [{id,text,category,reason,selected}, ...] }
-------------------------------------------------- */
export async function getAiSuggestions({ destination, dates, airline, travelClass, purpose, items }) {
  const json = await postJSON(`${API_BASE}/gemini/suggest`, {
    destination,
    dates,
    airline,
    travelClass,
    purpose,
    items,
  });
  return json?.data || { suggestions: [] };
}

/* --------------------------------------------------
   Step 4: Weight estimates
   POST /gemini/weight
   Returns: { items: [{ ...item, aiWeight }], totalG }
-------------------------------------------------- */
export async function getWeights({ items }) {
  const json = await postJSON(`${API_BASE}/gemini/weight`, { items });
  return json?.data || { items: [], totalG: 0 };
}

/* --------------------------------------------------
   Step 4 (if overweight): Optimize list
   POST /gemini/optimize
   Returns: { keep: [...items], drop: [...items], totalG, limitG }
-------------------------------------------------- */
export async function optimizeItems({ items, limitKg }) {
  const json = await postJSON(`${API_BASE}/gemini/optimize`, { items, limitKg });
  return json?.data || null;
}

/* --------------------------------------------------
   NEW: Suitcase lookup (brand/model URL or text)
   POST /luggage/lookup
   Returns: { dims:{lengthCm,widthCm,depthCm}, liters }
-------------------------------------------------- */
export async function lookupLuggage({ query }) {
  const json = await postJSON(`${API_BASE}/luggage/lookup`, { query });
  return json?.data || {};
}

/* --------------------------------------------------
   Step 5: Packing strategy
   POST /gemini/steps
   Send:
     { items, recommendationsSelected, suitcaseSizeL, suitcaseDims, luggageType }
   Returns:
     { suitcaseSizeL, suitcaseDims, luggageType, orderedPackingList: [...], steps: [...] }
-------------------------------------------------- */
export async function getPackingSteps({
  items,
  recommendationsSelected,
  suitcaseSizeL,
  suitcaseDims,      // <-- now supported
  luggageType,
}) {
  const json = await postJSON(`${API_BASE}/gemini/steps`, {
    items,
    recommendationsSelected,
    suitcaseSizeL,
    suitcaseDims,     // <-- pass to backend
    luggageType,
  });
  return (
    json?.data || {
      suitcaseSizeL,
      suitcaseDims,
      luggageType,
      orderedPackingList: [],
      steps: [],
    }
  );
}

/* --------------------------------------------------
   Save trip metadata
   POST /trips/save
   Body: { uid, tripId, trip: {...} }
   Returns: { tripId }
-------------------------------------------------- */
export async function saveTrip(uid, maybeTripId, tripPayload) {
  const json = await postJSON(`${API_BASE}/trips/save`, {
    uid,
    tripId: maybeTripId || null,
    trip: { ...tripPayload },
  });
  return json?.data || {};
}

/* --------------------------------------------------
   Save trip items (bulk)
   POST /trips/items/save
   Body: { uid, tripId, items: [...] }
   Returns: { count: N }
-------------------------------------------------- */
export async function saveTripItems(uid, tripId, itemsArray) {
  const json = await postJSON(`${API_BASE}/trips/items/save`, {
    uid,
    tripId,
    items: itemsArray,
  });
  return json?.data || { count: 0 };
}

/* --------------------------------------------------
   Delete a trip
   POST /trips/delete
   Body: { uid, tripId }
   Returns: { ok:true }
-------------------------------------------------- */
export async function deleteTrip(uid, tripId) {
  const json = await postJSON(`${API_BASE}/trips/delete`, { uid, tripId });
  return json?.ok === true;
}

/* --------------------------------------------------
   Health check (useful for wake-up pings)
   GET /health
-------------------------------------------------- */
export async function pingHealth() {
  const res = await fetch(`${API_BASE}/health`, { cache: "no-store" });
  const json = await res.json();
  return Boolean(json?.ok);
}

/* --------------------------------------------------
   OPTIONAL: Normalize legacy AI response into { tips, strategy }
   Use this in the UI if your backend returns { ok, data:{ suggestions: [...] } }
-------------------------------------------------- */
export function normalizeAiResponse(raw, items = []) {
  if (Array.isArray(raw?.tips) || Array.isArray(raw?.strategy)) return raw;

  const suggs = raw?.data?.suggestions || raw?.suggestions || [];
  const tips = suggs.map(s => ({
    title: s.text || s.id || "Tip",
    detail: s.reason || s.category || "",
  }));

  const names = items.map(i => i.name).filter(Boolean).slice(0, 5).join(", ");
  const strategy = [
    { title: "Prep & compress", detail: `Use cubes; roll shirts. Pack: ${names || "clothes"}.` },
    { title: "Layering", detail: "Shoes bottom; clothes middle; toiletries & tech on top." },
    { title: "Final check", detail: "Weigh bag; verify airline limits and remove extras." },
  ];

  return { tips, strategy };
}
