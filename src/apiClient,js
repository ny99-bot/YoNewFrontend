// src/apiClient.js

// Resolve API base for BOTH Expo/TestFlight and Vite/Web.
// Priority: EXPO_PUBLIC_API_BASE (Expo) -> VITE_API_BASE (Vite) -> hardcoded fallback.
const expoBase =
  typeof process !== "undefined" &&
  process.env &&
  process.env.EXPO_PUBLIC_API_BASE;

const viteBase = typeof import.meta !== "undefined"
  ? import.meta?.env?.VITE_API_BASE
  : undefined;

// Final, trailing-slash-free base URL
const API_BASE = String(expoBase || viteBase || "https://yonewbackend.onrender.com").replace(/\/$/, "");

/* --------------------------------------------------
   UID helper (stable per browser)
   Safe on native (no localStorage crash)
-------------------------------------------------- */
export function getUid() {
  try {
    if (typeof localStorage !== "undefined") {
      let uid = localStorage.getItem("uid");
      if (!uid) {
        uid = "uid_" + Math.random().toString(36).slice(2);
        localStorage.setItem("uid", uid);
      }
      return uid;
    }
  } catch {
    // ignore
  }
  return "uid_" + Math.random().toString(36).slice(2);
}

/* --------------------------------------------------
   Small fetch helper with proper error surfacing
-------------------------------------------------- */
async function postJSON(url, body, { retries = 1 } = {}) {
  let lastErr;
  for (let i = 0; i <= retries; i++) {
    try {
      const res = await fetch(url, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body ?? {}),
      });

      // Try to parse JSON; if it fails, fall back to text
      const text = await res.text();
      let json;
      try { json = text ? JSON.parse(text) : null; } catch { json = null; }

      if (!res.ok) {
        const msg = (json && (json.error || json.message)) || text || `HTTP ${res.status}`;
        throw new Error(msg);
      }
      return json;
    } catch (e) {
      lastErr = e;
      if (i < retries) {
        await new Promise(r => setTimeout(r, 600 * (i + 1)));
      }
    }
  }
  throw lastErr;
}

async function getJSON(url) {
  const res = await fetch(url, { method: "GET", cache: "no-store" });
  const text = await res.text();
  let json;
  try { json = text ? JSON.parse(text) : null; } catch { json = null; }
  if (!res.ok) {
    const msg = (json && (json.error || json.message)) || text || `HTTP ${res.status}`;
    throw new Error(msg);
  }
  return json;
}

/* --------------------------------------------------
   List trips
   GET /trips/list?uid=...
-------------------------------------------------- */
export async function listTrips(uid) {
  const json = await getJSON(`${API_BASE}/trips/list?uid=${encodeURIComponent(uid)}`);
  return json?.data?.trips || [];
}

/* --------------------------------------------------
   Fetch a single trip (with items)
   GET /trips/get?uid=...&tripId=...
-------------------------------------------------- */
export async function fetchTripDetails(uid, tripId) {
  return await getJSON(
    `${API_BASE}/trips/get?uid=${encodeURIComponent(uid)}&tripId=${encodeURIComponent(tripId)}`
  );
}

/* --------------------------------------------------
   AI Suggestions (location-aware)
   POST /gemini/suggest
-------------------------------------------------- */
export async function getAiSuggestions({ destination, dates, airline, travelClass, purpose, items }) {
  const json = await postJSON(`${API_BASE}/gemini/suggest`, {
    destination,
    dates,          // can be {start,end}, ["start","end"], or "YYYY-MM-DD"
    airline,
    travelClass,
    purpose,
    items,
  });
  return json?.data || { suggestions: [] };
}

/* --------------------------------------------------
   Weight estimates
   POST /gemini/weight
-------------------------------------------------- */
export async function getWeights({ items }) {
  const json = await postJSON(`${API_BASE}/gemini/weight`, { items });
  return json?.data || { items: [], totalG: 0 };
}

/* --------------------------------------------------
   Optimize list vs. airline limit
   POST /gemini/optimize
-------------------------------------------------- */
export async function optimizeItems({ items, limitKg }) {
  const json = await postJSON(`${API_BASE}/gemini/optimize`, { items, limitKg });
  return json?.data || null;
}

/* --------------------------------------------------
   Suitcase lookup (brand/model or URL)
   POST /luggage/lookup
-------------------------------------------------- */
export async function lookupLuggage({ query, lengthCm, widthCm, depthCm, url }) {
  const json = await postJSON(`${API_BASE}/luggage/lookup`, {
    query, url, lengthCm, widthCm, depthCm,
  });
  return json?.data || {};
}

/* --------------------------------------------------
   Packing strategy
   POST /gemini/steps
-------------------------------------------------- */
export async function getPackingSteps({
  items,
  recommendationsSelected,
  suitcaseSizeL,
  suitcaseDims,   // { lengthCm, widthCm, depthCm } optional
  luggageType,
}) {
  const json = await postJSON(`${API_BASE}/gemini/steps`, {
    items,
    recommendationsSelected,
    suitcaseSizeL,
    suitcaseDims,
    luggageType,
  });
  return (
    json?.data || {
      suitcaseSizeL,
      suitcaseDims,
      luggageType,
      orderedPackingList: [],
      steps: [],
    }
  );
}

/* --------------------------------------------------
   Save trip metadata
   POST /trips/save
-------------------------------------------------- */
export async function saveTrip(uid, maybeTripId, tripPayload) {
  const json = await postJSON(`${API_BASE}/trips/save`, {
    uid,
    tripId: maybeTripId || null,
    trip: { ...tripPayload },
  });
  return json?.data || {};
}

/* --------------------------------------------------
   Save trip items (bulk)
   POST /trips/items/save
-------------------------------------------------- */
export async function saveTripItems(uid, tripId, itemsArray) {
  const json = await postJSON(`${API_BASE}/trips/items/save`, {
    uid,
    tripId,
    items: itemsArray,
  });
  return json?.data || { count: 0 };
}

/* --------------------------------------------------
   Delete a trip
   POST /trips/delete
-------------------------------------------------- */
export async function deleteTrip(uid, tripId) {
  const json = await postJSON(`${API_BASE}/trips/delete`, { uid, tripId });
  return json?.ok === true;
}

/* --------------------------------------------------
   Health check
   GET /health
-------------------------------------------------- */
export async function pingHealth() {
  const json = await getJSON(`${API_BASE}/health`);
  return Boolean(json?.ok);
}

/* --------------------------------------------------
   OPTIONAL: normalize AI response for UI
-------------------------------------------------- */
export function normalizeAiResponse(raw, items = []) {
  if (Array.isArray(raw?.tips) || Array.isArray(raw?.strategy)) return raw;

  const suggs = raw?.data?.suggestions || raw?.suggestions || [];
  const tips = suggs.map(s => ({
    title: s.text || s.id || "Tip",
    detail: s.reason || s.category || "",
  }));

  const names = items.map(i => i.name).filter(Boolean).slice(0, 5).join(", ");
  const strategy = [
    { title: "Prep & compress", detail: `Use cubes; roll shirts. Pack: ${names || "clothes"}.` },
    { title: "Layering", detail: "Shoes bottom; clothes middle; toiletries & tech on top." },
    { title: "Final check", detail: "Weigh bag; verify airline limits and remove extras." },
  ];

  return { tips, strategy };
}
